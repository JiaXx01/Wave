// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String?  @unique @db.VarChar(50)
  email      String   @unique @db.VarChar(50)
  headPic    String?  @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  notes Note[]
  files File[]
  friendships1 Friendship[] @relation("User1")
  friendships2 Friendship[] @relation("User2")
  friendRequestsSent    FriendRequest[] @relation("Sender")
  friendRequestsReceived FriendRequest[] @relation("Receiver")
}

model Note {
  id         String   @id @default(cuid())
  title      String   @default("未命名") @db.VarChar(50)
  content    Json?
  userId     String
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model File {
  id       String  @id @default(cuid())
  name     String
  isFolder Boolean // 是否是文件夹
  size     Int?    // 文件大小
  type     String? // 文件类型 Content-Type
  suffix   String? // 文件后缀名
  hash     String? // 文件哈希
  userId   String
  user     User    @relation(fields: [userId], references: [id])

  parentId String?
  parent   File?   @relation("ParentChildren", fields: [parentId], references: [id])
  children File[]  @relation("ParentChildren")

  uploadTime DateTime @default(now())
}

model Friendship {
  id String  @id @default(cuid())
  user1_id String
  user2_id String

  user1 User @relation("User1", fields: [user1_id], references: [id])
  user2 User @relation("User2", fields: [user2_id], references: [id])

  @@unique([user1_id, user2_id])
  @@index([user1_id])
  @@index([user2_id])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(pending)

  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])

  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}
